const { dir } = require('console');
const fs = require('fs');
const { join } = require('path');
const path = require('path');
const { stringify } = require('querystring');

const lib = {};

lib.basedir = path.join(__dirname, '/../.data/');

lib.create = (dir, file, data, callback) => {

    fs.open(`${lib.basedir + dir}/${file}.json`, 'wx', (err, fileDescriptor) => {
        if (!err && fileDescriptor) {

            
            const stringData = JSON.stringify(data);
         
            fs.writeFile(fileDescriptor, stringData, (err2) => {
                if (!err2) {
                    fs.close(fileDescriptor, (err3) => {
                        if (!err3) {
                            callback(false);
                        } else {
                            callback('Error closing the new file!');
                        }
                    });
                } else {
                    callback('Error writing to new file!');
                }
            });
        } else {
            callback('There was an error, file may already exists!');
        }
    });
};

lib.read = (dir, file, callback)=> {
fs.readFile(`${lib.basedir + dir}/${file}.json`, 'utf-8', (err,data) => {
    callback(err,data);
});
};

lib.update =(dir, file, data, callback) =>{

   fs.open(`${lib.basedir + dir}/${file}.json`, 'r+', (err,fileDescriptor) => {
    if(!err && fileDescriptor){
        const stringData = JSON.stringify(data);
        fs.ftruncate(fileDescriptor, (err) => {
            if(!err){
                fs.writeFile(fileDescriptor, stringData, (err) => {
                  if(!err) {
                  fs.close(fileDescriptor, (err) => {
                 if(!err) {
                    callback(false);
                 } else {
                    callback('error waiting to file');
                 }
                  })
                  } else
                  {
                    callback('Error trancate file');
                  }
                })
            } else 
            {
                console.log('Error updating. File may not exits');
            }
        })
    }  

   });
};

// delete existing file 
lib.delete =(dir, file, callback) => {
    //unlink file
    fs.unlink(`${lib.basedir+ dir}/${file}.json`, (err) => {
        if(!err)
        {
            callback(false);
        }
        else
        {
            callback('Error deleting file');
        }
    });    
} 

module.exports = lib;
